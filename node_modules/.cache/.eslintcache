[{"/Users/klevishhaljothi/Downloads/React-workshop-main/src/index.tsx":"1","/Users/klevishhaljothi/Downloads/React-workshop-main/src/reportWebVitals.ts":"2","/Users/klevishhaljothi/Downloads/React-workshop-main/src/App.tsx":"3","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/UserProfile.tsx":"4","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/EditPost.tsx":"5","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/PostsList.tsx":"6","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/AllUsers.tsx":"7","/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/Header.tsx":"8","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/ImageGalleryPicker.tsx":"9","/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/Field.tsx":"10","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/PostItem.tsx":"11","/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/SelectedImage.tsx":"12","/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/Checkmark.tsx":"13","/Users/klevishhaljothi/Downloads/React-workshop-main/src/api/post.ts":"14","/Users/klevishhaljothi/Downloads/React-workshop-main/src/api/user.ts":"15","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/UserItem.tsx":"16"},{"size":500,"mtime":1649060920000,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1649060920000,"results":"19","hashOfConfig":"18"},{"size":895,"mtime":1649749374785,"results":"20","hashOfConfig":"18"},{"size":1142,"mtime":1649060920000,"results":"21","hashOfConfig":"18"},{"size":6780,"mtime":1649670759056,"results":"22","hashOfConfig":"18"},{"size":1320,"mtime":1649666465398,"results":"23","hashOfConfig":"18"},{"size":730,"mtime":1649748069406,"results":"24","hashOfConfig":"18"},{"size":1617,"mtime":1649060920000,"results":"25","hashOfConfig":"18"},{"size":2739,"mtime":1649060920000,"results":"26","hashOfConfig":"18"},{"size":336,"mtime":1649060920000,"results":"27","hashOfConfig":"18"},{"size":1732,"mtime":1649060920000,"results":"28","hashOfConfig":"18"},{"size":2684,"mtime":1649060920000,"results":"29","hashOfConfig":"18"},{"size":846,"mtime":1649060920000,"results":"30","hashOfConfig":"18"},{"size":2506,"mtime":1649670185750,"results":"31","hashOfConfig":"18"},{"size":2047,"mtime":1649748507736,"results":"32","hashOfConfig":"18"},{"size":1097,"mtime":1649748829769,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"168109",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/klevishhaljothi/Downloads/React-workshop-main/src/index.tsx",[],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/reportWebVitals.ts",[],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/App.tsx",["87"],[],"import React from 'react'\nimport './App.css'\nimport PostsList from './components/PostsList'\nimport { BrowserRouter, Routes, Route } from 'react-router-dom'\nimport EditPost from './components/EditPost'\nimport Header from './private/Header'\nimport UserItem from './components/UserItem'\nimport AllUsers from './components/AllUsers'\nimport UserProfile from './components/UserProfile'\n\nconst RouterApp = () => (\n    <BrowserRouter>\n        <div>\n            <Header />\n            <Routes>\n                <Route path=\"/\" element={<PostsList />} />\n                <Route path=\"/post/new\" element={<EditPost />} />\n                <Route path=\"/post/:id\" element={<EditPost />} />\n                <Route path=\"/users/:id\" element={<UserProfile />} />\n                <Route path=\"/users\" element={<AllUsers />} />\n            </Routes>\n        </div>\n    </BrowserRouter>\n)\n\nexport default RouterApp\n","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/UserProfile.tsx",["88","89"],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/EditPost.tsx",["90","91","92","93"],[],"import React, { useReducer, useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { Picker_Picture, Post, PostContent, User } from '../api/types'\nimport Field from '../private/Field'\nimport ImageGalleryPicker from './ImageGalleryPicker'\nimport {getPost} from '../api/post'\n\ntype FormEvent =\n    | React.ChangeEvent<HTMLTextAreaElement>\n    | React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>\n\ntype FormData = { name: string; value: string | number | undefined }\n\nconst formReducer = (state: Post | PostContent, event: FormData) => {\n    return {\n        ...state,\n        [event.name]: event.value,\n    }\n}\n\nconst EditPost = () => {\n    const [users, setUsers] = useState<Array<User>>([])\n    const [showPictureModal, setShowPictureModal] = useState<boolean>(false)\n    const [formData, setFormData] = useReducer(\n        formReducer,\n        {} as Post | PostContent\n    )\n    let { id } = useParams() // post id from url\n    const navigate = useNavigate() // create a navigate function instance\n\n    async function _getPost(id:number) {\n        const data = await getPost(id);\n        convertToFormData(data);\n        console.log(data)\n    }\n    \n\n    useEffect(() => {\n        _getPost(Number(id))\n    }, [id]);\n\n    function handleModalPictureSubmit(picture: Picker_Picture) {\n        setFormData({\n            name: 'postImageUrl',\n            value: picture.src,\n        })\n    }\n\n    async function handleAddOrCreatePost(\n        event: React.FormEvent<HTMLFormElement>\n    ) {\n        // remove default reloading page\n        event.preventDefault()\n\n        // back to Home\n        navigate('/')\n    }\n\n    async function handleDeletePost() {\n        // back to Home\n        navigate('/')\n    }\n\n    function handleChange(event: FormEvent) {\n        //\n        const value =\n            event.target.name === 'userId'\n                ? Number(event.target.value)\n                : event.target.value\n        setFormData({\n            name: event.target.name,\n            value,\n        })\n    }\n\n    function convertToFormData(post: Post): void {\n        // helper to convert post data into formData\n        // use it before set formData with API data\n        // ex: convertToFormData(data):\n        ;(Object.keys(post) as Array<keyof typeof post>).map((key) => {\n            setFormData({\n                name: key,\n                value: post[key],\n            })\n        })\n    }\n\n    function handleToggleModal() {\n        // Show & Hide picture modal\n        setShowPictureModal((s) => !s)\n    }\n\n    function getSelectedPicture() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.postImageUrl) {\n            return formData.postImageUrl\n        } else {\n            return 'https://via.placeholder.com/320/810b14'\n        }\n    }\n\n    function getSelectedAuthor() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.userId) {\n            // [WORK]\n            // You need to find the author name with the server\n            return '[TO DO]'\n        } else {\n            return 'Unknown author'\n        }\n    }\n\n    return (\n        <>\n            <form className=\"post-form\" onSubmit={handleAddOrCreatePost}>\n                <Field label=\"Title\">\n                    <input\n                        name=\"title\"\n                        className=\"input\"\n                        type=\"text\"\n                        placeholder=\"Text input\"\n                        value={formData.title}\n                        onChange={handleChange}\n                    />\n                </Field>\n                <Field label=\"Content\">\n                    <textarea\n                        onChange={event =>handleChange(event) } // meme chose que onChange=(handleChange)\n                        name=\"body\"\n                        className=\"textarea\"\n                        placeholder=\"e.g. Hello world\"\n                        value={formData.body}\n                    />\n                </Field>\n                <Field label=\"Post creator\">\n                    {!!!id ? (\n                        <div className=\"select\" defaultValue={formData.userId}>\n                            {users.length > 0 && (\n                                <select\n                                    name=\"userId\"\n                                    onChange={handleChange}\n                                    defaultValue={users[0].id}\n                                >\n                                    {users.map((user) => (\n                                        <option key={user.id} value={user.id}>\n                                            {user.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    ) : (\n                        <label>{getSelectedAuthor()}</label>\n                    )}\n                </Field>\n\n                <Field label=\"Post Picture\">\n                    <input type=\"hidden\" value=\"1\" name=\"postImageID\" />\n                    <div>\n                        <img src={getSelectedPicture()} />\n                        <button\n                            type=\"button\"\n                            className=\"button is-primary\"\n                            onClick={handleToggleModal}\n                        >\n                            Open picker modal\n                        </button>\n                    </div>\n                </Field>\n\n                {!!id && (\n                    <Field label=\"Extra actions\">\n                        <button\n                            type=\"button\"\n                            className=\"button is-warning\"\n                            onClick={handleDeletePost}\n                        >\n                            Delete post\n                        </button>\n                    </Field>\n                )}\n\n                <div className=\"field is-grouped is-grouped-centered\">\n                    <p className=\"control\">\n                        <button type=\"submit\" className=\"button is-primary\">\n                            Submit\n                        </button>\n                    </p>\n                    <p className=\"control\">\n                        <Link to=\"/\" className=\"button is-light\">\n                            Cancel\n                        </Link>\n                    </p>\n                </div>\n            </form>\n            {showPictureModal && (\n                <ImageGalleryPicker\n                    onClose={handleToggleModal}\n                    onSubmit={handleModalPictureSubmit}\n                />\n            )}\n        </>\n    )\n}\n\nexport default EditPost\n",["94","95"],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/PostsList.tsx",["96","97"],[],"import React, { useEffect, useState } from 'react'\nimport { sortAndDeduplicateDiagnostics } from 'typescript'\nimport { getPosts } from '../api/post'\nimport { Post } from '../api/types'\nimport PostItem from './PostItem'\n\nconst PostsList = () => {\n    const [posts, setPosts] = useState<Array<Post>>([])\n    const [loading, setLoading] = useState(false)\n\n    async function _getPosts() {\n        const data = await getPosts();\n        console.log('got posts')\n        setPosts(data);\n        console.log(data)\n\n    }\n\n    useEffect(() => {\n        _getPosts()\n    }, [])\n\n\n\n    function renderItem(values: Post) {\n        return (\n            <div key={values.id}>\n                <PostItem {...values} />\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">Loading ...</p>\n                </div>\n            </section>\n        )\n    }\n\n    if (posts.length === 0) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">No Posts</p>\n                </div>\n            </section>\n        )\n    }\n\n    return <ul className=\"post-list\">{posts.map(renderItem)}</ul>\n}\n\nexport default PostsList\n","/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/AllUsers.tsx",[],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/Header.tsx",["98","99","100"],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/ImageGalleryPicker.tsx",["101","102"],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/Field.tsx",[],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/PostItem.tsx",["103","104"],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/SelectedImage.tsx",["105"],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/private/Checkmark.tsx",[],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/api/post.ts",["106"],[],"import { Post, PostContent } from './types'\nimport axios from 'axios'\n\nconst base_url = 'http://localhost:3004/posts'\n\nasync function getPost(postID: Post['id']): Promise<Post> {\n    // get a unique post\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(`${base_url}/${postID}`);\n    return await response.json();\n\n    // return {\n    //     id: 1,\n    //     title: 'title',\n    //     userId: 1,\n    //     body: 'body',\n    //     postImageUrl: 'https://picsum.photos/1280/960',\n    // }\n}\n\nasync function getPosts(): Promise<Array<Post>> {\n    // get all posts\n    // [TODO] remove this return to use a fetch API\n\n    const response = await fetch(base_url);\n    const dataPosts = await response.json();\n\n    return dataPosts\n\n    // return [\n    //     {\n    //         id: 1,\n    //         title: 'title',\n    //         userId: 1,\n    //         body: 'body',\n    //         postImageUrl: 'https://picsum.photos/1280/960',\n    //     },\n    //     {\n    //         id: 2,\n    //         title: 'title 2',\n    //         userId: 2,\n    //         body: 'body 2',\n    //         postImageUrl: 'https://picsum.photos/1280/960',\n    //     },\n    // ]\n}\n\nasync function createPost(post: PostContent): Promise<Post> {\n    // create a new post\n    // [TODO] remove this return to use a fetch API\n    const requestPost = {\n        method:'POST',\n        id: 1,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n            title: 'React POST Request Example', \n            userId: 1,\n            bodypost: 'body',\n            postImageUrl: 'https://picsum.photos/1280/960',        \n        }),\n\n    };\n    const response = await fetch(base_url, requestPost)\n    const dataPosts = await response.json();\n\n    return dataPosts\n\n    // return {\n    //     id: 1,\n    //     title: 'title',\n    //     userId: 1,\n    //     body: 'body',\n    //     postImageUrl: 'https://picsum.photos/1280/960',\n    // }\n}\n\nasync function updatePost(post: Post): Promise<Post> {\n    // update a existing post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\n    // delete a existing post\n    // [TODO] remove this return to use a fetch API\n    return 1\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost }\n","/Users/klevishhaljothi/Downloads/React-workshop-main/src/api/user.ts",[],[],"/Users/klevishhaljothi/Downloads/React-workshop-main/src/components/UserItem.tsx",["107","108","109","110"],[],{"ruleId":"111","severity":1,"message":"112","line":7,"column":8,"nodeType":"113","messageId":"114","endLine":7,"endColumn":16},{"ruleId":"111","severity":1,"message":"115","line":7,"column":20,"nodeType":"113","messageId":"114","endLine":7,"endColumn":29},{"ruleId":"111","severity":1,"message":"116","line":9,"column":11,"nodeType":"113","messageId":"114","endLine":9,"endColumn":13},{"ruleId":"111","severity":1,"message":"117","line":23,"column":19,"nodeType":"113","messageId":"114","endLine":23,"endColumn":27},{"ruleId":"118","severity":1,"message":"119","line":41,"column":8,"nodeType":"120","endLine":41,"endColumn":12,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":81,"column":68,"nodeType":"124","messageId":"125","endLine":81,"endColumn":70},{"ruleId":"126","severity":1,"message":"127","line":161,"column":25,"nodeType":"128","endLine":161,"endColumn":59},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"111","severity":1,"message":"133","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":39},{"ruleId":"111","severity":1,"message":"134","line":9,"column":21,"nodeType":"113","messageId":"114","endLine":9,"endColumn":31},{"ruleId":"135","severity":1,"message":"136","line":8,"column":17,"nodeType":"128","endLine":8,"endColumn":53},{"ruleId":"126","severity":1,"message":"127","line":9,"column":21,"nodeType":"128","endLine":9,"endColumn":48},{"ruleId":"135","severity":1,"message":"137","line":11,"column":17,"nodeType":"128","endLine":17,"endColumn":18},{"ruleId":"111","severity":1,"message":"138","line":14,"column":22,"nodeType":"113","messageId":"114","endLine":14,"endColumn":33},{"ruleId":"111","severity":1,"message":"139","line":16,"column":20,"nodeType":"113","messageId":"114","endLine":16,"endColumn":30},{"ruleId":"111","severity":1,"message":"115","line":6,"column":20,"nodeType":"113","messageId":"114","endLine":6,"endColumn":29},{"ruleId":"140","severity":1,"message":"141","line":13,"column":25,"nodeType":"128","endLine":19,"endColumn":27},{"ruleId":"126","severity":1,"message":"127","line":86,"column":13,"nodeType":"128","endLine":94,"endColumn":15},{"ruleId":"111","severity":1,"message":"142","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":13},{"ruleId":"111","severity":1,"message":"143","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"144","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":14},{"ruleId":"111","severity":1,"message":"145","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"116","line":9,"column":11,"nodeType":"113","messageId":"114","endLine":9,"endColumn":13},"@typescript-eslint/no-unused-vars","'UserItem' is defined but never used.","Identifier","unusedVar","'setAuthor' is assigned a value but never used.","'id' is assigned a value but never used.","'setUsers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getPost'. Either include it or remove the dependency array.","ArrayExpression",["146"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["147"],"no-negated-in-lhs",["148"],"'sortAndDeduplicateDiagnostics' is defined but never used.","'setLoading' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'setPictures' is assigned a value but never used.","'getPicture' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'axios' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'Post' is defined but never used.",{"desc":"149","fix":"150"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [_getPost, id]",{"range":"151","text":"152"},[1289,1293],"[_getPost, id]"]